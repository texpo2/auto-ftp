#!/bin/bash

# =============================================================================
# KISA/CSAP/Í∏∞Ïà†Ï†ÅÏ∑®ÏïΩÏ†êÌèâÍ∞Ä ÌÜµÌï© Î≥¥Ïïà Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ Ï≤¥Ïª§
# Version: 2.0
# Author: Security Compliance Team
# Date: 2024
# =============================================================================

set -euo pipefail

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Ï†ÑÏó≠ Î≥ÄÏàò
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0
WARNING_CHECKS=0
CRITICAL_FINDINGS=()
HIGH_FINDINGS=()
MEDIUM_FINDINGS=()
LOW_FINDINGS=()
REPORT_DIR="/var/log/security-compliance"
REPORT_FILE="$REPORT_DIR/compliance-report-$(date +%Y%m%d-%H%M%S).html"
JSON_REPORT="$REPORT_DIR/compliance-report-$(date +%Y%m%d-%H%M%S).json"

# Î°úÍπÖ Ìï®Ïàò
log_info() { echo -e "${CYAN}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[‚ö†]${NC} $1"; }
log_error() { echo -e "${RED}[‚úó]${NC} $1"; }
log_critical() { echo -e "${RED}${BOLD}[CRITICAL]${NC} $1"; }

# ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
mkdir -p "$REPORT_DIR"

# =============================================================================
# JSON Î¶¨Ìè¨Ìä∏ Ï¥àÍ∏∞Ìôî
# =============================================================================
init_json_report() {
    cat > "$JSON_REPORT" <<EOF
{
    "scan_date": "$(date -Iseconds)",
    "hostname": "$(hostname)",
    "compliance_frameworks": {
        "kisa_cloud": {},
        "technical_vulnerability": {},
        "csap": {},
        "docker_security": {}
    },
    "summary": {
        "total_checks": 0,
        "passed": 0,
        "failed": 0,
        "warnings": 0,
        "compliance_score": 0
    },
    "findings": {
        "critical": [],
        "high": [],
        "medium": [],
        "low": []
    }
}
EOF
}

# =============================================================================
# HTML Î¶¨Ìè¨Ìä∏ Ìó§Îçî
# =============================================================================
init_html_report() {
    cat > "$REPORT_FILE" <<'EOF'
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Î≥¥Ïïà Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ Î¶¨Ìè¨Ìä∏</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            min-height: 100vh;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        .header .subtitle {
            font-size: 1.2em;
            opacity: 0.9;
        }
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            padding: 30px;
            background: #f8f9fa;
        }
        .summary-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
        }
        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }
        .summary-card .value {
            font-size: 2.5em;
            font-weight: bold;
            margin: 10px 0;
        }
        .summary-card .label {
            color: #6c757d;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        .passed { color: #28a745; }
        .failed { color: #dc3545; }
        .warning { color: #ffc107; }
        .compliance-score {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .compliance-score .value {
            font-size: 3em;
        }
        .section {
            padding: 30px;
        }
        .section-title {
            font-size: 1.8em;
            color: #333;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 3px solid #667eea;
        }
        .check-item {
            background: #f8f9fa;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 10px;
            border-left: 5px solid #dee2e6;
            transition: all 0.3s ease;
        }
        .check-item:hover {
            transform: translateX(5px);
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }
        .check-item.passed {
            border-left-color: #28a745;
            background: #d4edda;
        }
        .check-item.failed {
            border-left-color: #dc3545;
            background: #f8d7da;
        }
        .check-item.warning {
            border-left-color: #ffc107;
            background: #fff3cd;
        }
        .severity {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.85em;
            font-weight: bold;
            text-transform: uppercase;
        }
        .severity.critical {
            background: #dc3545;
            color: white;
        }
        .severity.high {
            background: #fd7e14;
            color: white;
        }
        .severity.medium {
            background: #ffc107;
            color: #333;
        }
        .severity.low {
            background: #28a745;
            color: white;
        }
        .progress-bar {
            width: 100%;
            height: 30px;
            background: #e9ecef;
            border-radius: 15px;
            overflow: hidden;
            margin: 20px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
            transition: width 0.5s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        .recommendation {
            background: #e7f3ff;
            border-left: 4px solid #007bff;
            padding: 10px 15px;
            margin-top: 10px;
            border-radius: 5px;
        }
        .timestamp {
            text-align: center;
            color: #6c757d;
            margin: 20px 0;
            font-size: 0.9em;
        }
        @media print {
            body { background: white; }
            .container { box-shadow: none; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ°Ô∏è Î≥¥Ïïà Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ Î¶¨Ìè¨Ìä∏</h1>
            <div class="subtitle">KISA ‚Ä¢ CSAP ‚Ä¢ Í∏∞Ïà†Ï†Å Ï∑®ÏïΩÏ†ê ÌèâÍ∞Ä ‚Ä¢ Docker Î≥¥Ïïà</div>
        </div>
EOF
}

# =============================================================================
# Ï≤¥ÌÅ¨ Ìï®Ïàò
# =============================================================================
perform_check() {
    local check_name="$1"
    local check_command="$2"
    local severity="${3:-MEDIUM}"
    local framework="${4:-GENERAL}"
    local recommendation="${5:-}"
    
    ((TOTAL_CHECKS++))
    
    if eval "$check_command" &>/dev/null; then
        ((PASSED_CHECKS++))
        log_success "$check_name"
        echo "<div class='check-item passed'><strong>‚úì $check_name</strong> <span class='severity low'>PASSED</span></div>" >> "$REPORT_FILE"
    else
        ((FAILED_CHECKS++))
        log_error "$check_name"
        echo "<div class='check-item failed'><strong>‚úó $check_name</strong> <span class='severity ${severity,,}'>$severity</span>" >> "$REPORT_FILE"
        if [[ -n "$recommendation" ]]; then
            echo "<div class='recommendation'>üí° Í∂åÏû•ÏÇ¨Ìï≠: $recommendation</div>" >> "$REPORT_FILE"
        fi
        echo "</div>" >> "$REPORT_FILE"
        
        case $severity in
            CRITICAL) CRITICAL_FINDINGS+=("$check_name") ;;
            HIGH) HIGH_FINDINGS+=("$check_name") ;;
            MEDIUM) MEDIUM_FINDINGS+=("$check_name") ;;
            LOW) LOW_FINDINGS+=("$check_name") ;;
        esac
    fi
}

# =============================================================================
# KISA ÌÅ¥ÎùºÏö∞Îìú Î≥¥Ïïà Í∞ÄÏù¥Îìú Ï≤¥ÌÅ¨
# =============================================================================
check_kisa_cloud_security() {
    echo "<div class='section'><h2 class='section-title'>üìã KISA ÌÅ¥ÎùºÏö∞Îìú Î≥¥Ïïà Í∞ÄÏù¥Îìú</h2>" >> "$REPORT_FILE"
    log_info "KISA ÌÅ¥ÎùºÏö∞Îìú Î≥¥Ïïà Í∞ÄÏù¥Îìú Í≤ÄÏÇ¨ ÏãúÏûë..."
    
    # 1. Ï†ëÍ∑ºÌÜµÏ†ú
    perform_check "Í≥ÑÏ†ï Í¥ÄÎ¶¨ - root ÏßÅÏ†ë Î°úÍ∑∏Ïù∏ Ï∞®Îã®" \
        "grep -q '^PermitRootLogin no' /etc/ssh/sshd_config 2>/dev/null" \
        "CRITICAL" "KISA" \
        "sshd_configÏóêÏÑú PermitRootLoginÏùÑ noÎ°ú ÏÑ§Ï†ï"
    
    perform_check "Í≥ÑÏ†ï Í¥ÄÎ¶¨ - Ìå®Ïä§ÏõåÎìú Î≥µÏû°ÎèÑ Ï†ïÏ±Ö" \
        "grep -q 'minlen=8' /etc/security/pwquality.conf 2>/dev/null" \
        "HIGH" "KISA" \
        "pwquality.confÏóêÏÑú ÏµúÏÜå Í∏∏Ïù¥ 8Ïûê, Î≥µÏû°ÎèÑ Í∑úÏπô ÏÑ§Ï†ï"
    
    perform_check "Í≥ÑÏ†ï Í¥ÄÎ¶¨ - Í≥ÑÏ†ï Ïû†Í∏à Ï†ïÏ±Ö" \
        "grep -q 'deny=5' /etc/pam.d/system-auth 2>/dev/null || grep -q 'deny=5' /etc/pam.d/common-auth 2>/dev/null" \
        "HIGH" "KISA" \
        "PAM ÏÑ§Ï†ïÏóêÏÑú 5Ìöå Ïã§Ìå® Ïãú Í≥ÑÏ†ï Ïû†Í∏à ÏÑ§Ï†ï"
    
    # 2. ÎÑ§Ìä∏ÏõåÌÅ¨ Î≥¥Ïïà
    perform_check "ÎÑ§Ìä∏ÏõåÌÅ¨ - Î∞©ÌôîÎ≤Ω ÌôúÏÑ±Ìôî" \
        "systemctl is-active firewalld &>/dev/null || systemctl is-active ufw &>/dev/null" \
        "CRITICAL" "KISA" \
        "firewalld ÎòêÎäî ufw ÏÑúÎπÑÏä§ ÌôúÏÑ±Ìôî"
    
    perform_check "ÎÑ§Ìä∏ÏõåÌÅ¨ - Î∂àÌïÑÏöîÌïú Ìè¨Ìä∏ Ï∞®Îã®" \
        "! netstat -tuln | grep -E ':(23|135|139|445|3389)' &>/dev/null" \
        "HIGH" "KISA" \
        "ÌÖîÎÑ∑, SMB, RDP Îì± Î∂àÌïÑÏöîÌïú ÏÑúÎπÑÏä§ ÎπÑÌôúÏÑ±Ìôî"
    
    # 3. Î°úÍπÖ Î∞è Î™®ÎãàÌÑ∞ÎßÅ
    perform_check "Î°úÍπÖ - auditd ÏÑúÎπÑÏä§ ÌôúÏÑ±Ìôî" \
        "systemctl is-active auditd &>/dev/null" \
        "HIGH" "KISA" \
        "auditd ÏÑúÎπÑÏä§ ÏÑ§Ïπò Î∞è ÌôúÏÑ±Ìôî"
    
    perform_check "Î°úÍπÖ - Î°úÍ∑∏ Ï§ëÏïôÌôî ÏÑ§Ï†ï" \
        "test -f /etc/rsyslog.conf || test -f /etc/syslog-ng/syslog-ng.conf" \
        "MEDIUM" "KISA" \
        "rsyslog ÎòêÎäî syslog-ng ÏÑ§Ï†ï"
    
    # 4. ÏïîÌò∏Ìôî
    perform_check "ÏïîÌò∏Ìôî - SSL/TLS ÏÑ§Ï†ï" \
        "test -f /etc/vsftpd/vsftpd.pem" \
        "CRITICAL" "KISA" \
        "FTP ÏÑúÎ≤Ñ SSL Ïù∏Ï¶ùÏÑú ÏÑ§Ï†ï"
    
    perform_check "ÏïîÌò∏Ìôî - Ï∑®ÏïΩÌïú ÌîÑÎ°úÌÜ†ÏΩú ÎπÑÌôúÏÑ±Ìôî" \
        "! grep -E 'ssl_sslv2=YES|ssl_sslv3=YES|ssl_tlsv1=YES' /etc/vsftpd/vsftpd.conf 2>/dev/null" \
        "HIGH" "KISA" \
        "SSLv2, SSLv3, TLSv1.0 ÎπÑÌôúÏÑ±Ìôî"
    
    echo "</div>" >> "$REPORT_FILE"
}

# =============================================================================
# Docker Î≥¥Ïïà Ï≤¥ÌÅ¨ (KISA Í∞ÄÏù¥Îìú)
# =============================================================================
check_docker_security() {
    echo "<div class='section'><h2 class='section-title'>üê≥ Docker Î≥¥Ïïà Ï≤¥ÌÅ¨</h2>" >> "$REPORT_FILE"
    log_info "Docker Î≥¥Ïïà Í≤ÄÏÇ¨ ÏãúÏûë..."
    
    # Docker ÏÑ§Ïπò Ïó¨Î∂Ä ÌôïÏù∏
    if command -v docker &>/dev/null; then
        perform_check "Docker - Îç∞Î™¨ Î≥¥Ïïà ÏÑ§Ï†ï" \
            "test -f /etc/docker/daemon.json" \
            "HIGH" "DOCKER" \
            "daemon.json ÌååÏùº ÏÉùÏÑ± Î∞è Î≥¥Ïïà ÏòµÏÖò ÏÑ§Ï†ï"
        
        perform_check "Docker - Î£®Ìä∏Î¶¨Ïä§ Î™®Îìú" \
            "docker info 2>/dev/null | grep -q 'rootless'" \
            "MEDIUM" "DOCKER" \
            "Docker rootless Î™®Îìú ÌôúÏÑ±Ìôî Í∂åÏû•"
        
        perform_check "Docker - Ïª®ÌÖåÏù¥ÎÑà Í≤©Î¶¨" \
            "! docker ps --quiet 2>/dev/null | xargs -I {} docker inspect {} | grep -q '\"Privileged\": true'" \
            "CRITICAL" "DOCKER" \
            "privileged Ïª®ÌÖåÏù¥ÎÑà ÏÇ¨Ïö© Í∏àÏßÄ"
        
        perform_check "Docker - Ïù¥ÎØ∏ÏßÄ ÏÑúÎ™Ö Í≤ÄÏ¶ù" \
            "grep -q 'content-trust' /etc/docker/daemon.json 2>/dev/null" \
            "MEDIUM" "DOCKER" \
            "Docker Content Trust ÌôúÏÑ±Ìôî"
        
        perform_check "Docker - Î°úÍπÖ ÎìúÎùºÏù¥Î≤Ñ ÏÑ§Ï†ï" \
            "docker info 2>/dev/null | grep -q 'Logging Driver'" \
            "MEDIUM" "DOCKER" \
            "Ï†ÅÏ†àÌïú Î°úÍπÖ ÎìúÎùºÏù¥Î≤Ñ ÏÑ§Ï†ï"
        
        perform_check "Docker - ÎÑ§Ìä∏ÏõåÌÅ¨ Í≤©Î¶¨" \
            "docker network ls | grep -q bridge" \
            "HIGH" "DOCKER" \
            "ÏÇ¨Ïö©Ïûê Ï†ïÏùò Î∏åÎ¶¨ÏßÄ ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÇ¨Ïö©"
        
        perform_check "Docker - Î¶¨ÏÜåÏä§ Ï†úÌïú" \
            "test -f /etc/docker/daemon.json && grep -q 'default-ulimits' /etc/docker/daemon.json" \
            "MEDIUM" "DOCKER" \
            "Ïª®ÌÖåÏù¥ÎÑà Î¶¨ÏÜåÏä§ Ï†úÌïú ÏÑ§Ï†ï"
    else
        log_warning "DockerÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏùå - Docker Î≥¥Ïïà Ï≤¥ÌÅ¨ Í±¥ÎÑàÎúÄ"
    fi
    
    echo "</div>" >> "$REPORT_FILE"
}

# =============================================================================
# Í∏∞Ïà†Ï†Å Ï∑®ÏïΩÏ†ê ÌèâÍ∞Ä Ï≤¥ÌÅ¨
# =============================================================================
check_technical_vulnerability() {
    echo "<div class='section'><h2 class='section-title'>üîç Í∏∞Ïà†Ï†Å Ï∑®ÏïΩÏ†ê ÌèâÍ∞Ä</h2>" >> "$REPORT_FILE"
    log_info "Í∏∞Ïà†Ï†Å Ï∑®ÏïΩÏ†ê ÌèâÍ∞Ä ÏãúÏûë..."
    
    # 1. Ïö¥ÏòÅÏ≤¥Ï†ú Î≥¥Ïïà
    perform_check "OS - ÏµúÏã† Î≥¥Ïïà Ìå®Ïπò Ï†ÅÏö©" \
        "! dnf check-update --security 2>/dev/null | grep -q 'updates'" \
        "CRITICAL" "VULN" \
        "dnf update --security Ïã§Ìñâ"
    
    perform_check "OS - Ïª§ÎÑê Î≥¥Ïïà Î™®Îìà (SELinux)" \
        "sestatus 2>/dev/null | grep -q 'enforcing'" \
        "HIGH" "VULN" \
        "SELinux enforcing Î™®Îìú ÏÑ§Ï†ï"
    
    perform_check "OS - Î∂àÌïÑÏöîÌïú ÏÑúÎπÑÏä§ ÎπÑÌôúÏÑ±Ìôî" \
        "! systemctl list-unit-files | grep enabled | grep -E 'bluetooth|cups|avahi'" \
        "MEDIUM" "VULN" \
        "Î∂àÌïÑÏöîÌïú ÏÑúÎπÑÏä§ ÎπÑÌôúÏÑ±Ìôî"
    
    # 2. ÌååÏùºÏãúÏä§ÌÖú Î≥¥Ïïà
    perform_check "ÌååÏùºÏãúÏä§ÌÖú - SUID/SGID ÌååÏùº ÏµúÏÜåÌôî" \
        "test $(find / -perm /6000 -type f 2>/dev/null | wc -l) -lt 50" \
        "MEDIUM" "VULN" \
        "Î∂àÌïÑÏöîÌïú SUID/SGID ÎπÑÌä∏ Ï†úÍ±∞"
    
    perform_check "ÌååÏùºÏãúÏä§ÌÖú - Ï§ëÏöî ÌååÏùº Í∂åÌïú" \
        "test $(stat -c %a /etc/passwd) = '644'" \
        "HIGH" "VULN" \
        "/etc/passwd ÌååÏùº Í∂åÌïú 644 ÏÑ§Ï†ï"
    
    perform_check "ÌååÏùºÏãúÏä§ÌÖú - /tmp ÌååÌã∞ÏÖò Î≥¥Ïïà" \
        "mount | grep '/tmp' | grep -q 'noexec'" \
        "MEDIUM" "VULN" \
        "/tmp ÌååÌã∞ÏÖòÏóê noexec ÏòµÏÖò ÏÑ§Ï†ï"
    
    # 3. ÎÑ§Ìä∏ÏõåÌÅ¨ Î≥¥Ïïà
    perform_check "ÎÑ§Ìä∏ÏõåÌÅ¨ - TCP SYN Flood Î∞©Ïñ¥" \
        "sysctl net.ipv4.tcp_syncookies | grep -q '= 1'" \
        "HIGH" "VULN" \
        "tcp_syncookies ÌôúÏÑ±Ìôî"
    
    perform_check "ÎÑ§Ìä∏ÏõåÌÅ¨ - IP Ïä§Ìë∏Ìïë Î∞©ÏßÄ" \
        "sysctl net.ipv4.conf.all.rp_filter | grep -q '= 1'" \
        "HIGH" "VULN" \
        "rp_filter ÌôúÏÑ±Ìôî"
    
    perform_check "ÎÑ§Ìä∏ÏõåÌÅ¨ - ICMP Î¶¨Îã§Ïù¥Î†âÌä∏ Ï∞®Îã®" \
        "sysctl net.ipv4.conf.all.accept_redirects | grep -q '= 0'" \
        "MEDIUM" "VULN" \
        "ICMP Î¶¨Îã§Ïù¥Î†âÌä∏ ÎπÑÌôúÏÑ±Ìôî"
    
    # 4. Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î≥¥Ïïà
    perform_check "FTP - Anonymous Î°úÍ∑∏Ïù∏ Ï∞®Îã®" \
        "grep -q 'anonymous_enable=NO' /etc/vsftpd/vsftpd.conf 2>/dev/null" \
        "CRITICAL" "VULN" \
        "vsftpd.confÏóêÏÑú anonymous_enable=NO ÏÑ§Ï†ï"
    
    perform_check "FTP - chroot jail ÏÑ§Ï†ï" \
        "grep -q 'chroot_local_user=YES' /etc/vsftpd/vsftpd.conf 2>/dev/null" \
        "HIGH" "VULN" \
        "ÏÇ¨Ïö©ÏûêÎ•º Ìôà ÎîîÎ†âÌÜ†Î¶¨Ïóê Ï†úÌïú"
    
    perform_check "FTP - Ï†ÑÏÜ° ÏïîÌò∏Ìôî" \
        "grep -q 'ssl_enable=YES' /etc/vsftpd/vsftpd.conf 2>/dev/null" \
        "CRITICAL" "VULN" \
        "FTPS ÌôúÏÑ±Ìôî"
    
    echo "</div>" >> "$REPORT_FILE"
}

# =============================================================================
# CSAP Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏
# =============================================================================
check_csap_compliance() {
    echo "<div class='section'><h2 class='section-title'>‚òÅÔ∏è CSAP Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§</h2>" >> "$REPORT_FILE"
    log_info "CSAP Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ Í≤ÄÏÇ¨ ÏãúÏûë..."
    
    # 1. Îç∞Ïù¥ÌÑ∞ Î≥¥Ìò∏
    perform_check "CSAP - Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî (Ï†ÑÏÜ° Ï§ë)" \
        "grep -q 'force_local_data_ssl=YES' /etc/vsftpd/vsftpd.conf 2>/dev/null" \
        "CRITICAL" "CSAP" \
        "Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Ïãú SSL Í∞ïÏ†ú"
    
    perform_check "CSAP - Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî (Ï†ÄÏû•)" \
        "command -v cryptsetup &>/dev/null" \
        "HIGH" "CSAP" \
        "LUKS ÎòêÎäî dm-crypt ÏÑ§Ï†ï"
    
    perform_check "CSAP - Î∞±ÏóÖ Ï†ïÏ±Ö" \
        "test -f /etc/cron.d/backup || crontab -l 2>/dev/null | grep -q backup" \
        "HIGH" "CSAP" \
        "Ï†ïÍ∏∞Ï†ÅÏù∏ Î∞±ÏóÖ Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ï"
    
    # 2. Ï†ëÍ∑º Ï†úÏñ¥
    perform_check "CSAP - Îã§Îã®Í≥Ñ Ïù∏Ï¶ù" \
        "test -f /etc/pam.d/sshd && grep -q 'pam_google_authenticator' /etc/pam.d/sshd" \
        "MEDIUM" "CSAP" \
        "Google Authenticator ÎòêÎäî Ïú†ÏÇ¨ MFA ÏÑ§Ï†ï"
    
    perform_check "CSAP - Ïó≠Ìï† Í∏∞Î∞ò Ï†ëÍ∑º Ï†úÏñ¥" \
        "test -f /etc/sudoers.d/security-roles" \
        "HIGH" "CSAP" \
        "ÏÑ∏Î∂ÑÌôîÎêú sudo Í∂åÌïú ÏÑ§Ï†ï"
    
    perform_check "CSAP - ÏÑ∏ÏÖò ÌÉÄÏûÑÏïÑÏõÉ" \
        "grep -q 'TMOUT=' /etc/profile 2>/dev/null" \
        "MEDIUM" "CSAP" \
        "Ïâò ÏÑ∏ÏÖò ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï"
    
    # 3. Î≥¥Ïïà Î™®ÎãàÌÑ∞ÎßÅ
    perform_check "CSAP - Ïπ®ÏûÖ ÌÉêÏßÄ ÏãúÏä§ÌÖú" \
        "systemctl is-active fail2ban &>/dev/null || systemctl is-active aide &>/dev/null" \
        "HIGH" "CSAP" \
        "Fail2ban ÎòêÎäî AIDE ÌôúÏÑ±Ìôî"
    
    perform_check "CSAP - Î°úÍ∑∏ Î¨¥Í≤∞ÏÑ±" \
        "test -f /etc/rsyslog.d/remote.conf || test -f /etc/audit/auditd.conf" \
        "HIGH" "CSAP" \
        "Ï§ëÏïô Î°úÍ∑∏ ÏÑúÎ≤Ñ ÎòêÎäî Î°úÍ∑∏ Î¨¥Í≤∞ÏÑ± ÎèÑÍµ¨ ÏÑ§Ï†ï"
    
    perform_check "CSAP - Î≥¥Ïïà Ïù¥Î≤§Ìä∏ ÏïåÎ¶º" \
        "test -f /etc/aide.conf || test -f /etc/tripwire/twpol.txt" \
        "MEDIUM" "CSAP" \
        "ÌååÏùº Î¨¥Í≤∞ÏÑ± Î™®ÎãàÌÑ∞ÎßÅ ÏÑ§Ï†ï"
    
    # 4. ÏÇ¨Í≥† ÎåÄÏùë
    perform_check "CSAP - ÏÇ¨Í≥† ÎåÄÏùë Í≥ÑÌöç" \
        "test -f /etc/security/incident-response.md" \
        "MEDIUM" "CSAP" \
        "Î¨∏ÏÑúÌôîÎêú ÏÇ¨Í≥† ÎåÄÏùë Ï†àÏ∞® ÏûëÏÑ±"
    
    perform_check "CSAP - Ìè¨Î†åÏãù Ï§ÄÎπÑ" \
        "command -v tcpdump &>/dev/null && command -v tshark &>/dev/null" \
        "LOW" "CSAP" \
        "Ìè¨Î†åÏãù ÎèÑÍµ¨ ÏÇ¨Ï†Ñ ÏÑ§Ïπò"
    
    echo "</div>" >> "$REPORT_FILE"
}

# =============================================================================
# FTP ÏÑúÎ≤Ñ ÌäπÌôî Î≥¥Ïïà Ï≤¥ÌÅ¨
# =============================================================================
check_ftp_specific() {
    echo "<div class='section'><h2 class='section-title'>üìÅ FTP ÏÑúÎ≤Ñ Î≥¥Ïïà Ï≤¥ÌÅ¨</h2>" >> "$REPORT_FILE"
    log_info "FTP ÏÑúÎ≤Ñ ÌäπÌôî Î≥¥Ïïà Í≤ÄÏÇ¨ ÏãúÏûë..."
    
    # vsftpd ÏÑ§Ï†ï Ï≤¥ÌÅ¨
    if [[ -f /etc/vsftpd/vsftpd.conf ]]; then
        perform_check "FTP - Î°úÏª¨ ÏÇ¨Ïö©Ïûê Ï†úÌïú" \
            "grep -q 'userlist_enable=YES' /etc/vsftpd/vsftpd.conf" \
            "HIGH" "FTP" \
            "ÏÇ¨Ïö©Ïûê ÌôîÏù¥Ìä∏Î¶¨Ïä§Ìä∏ ÌôúÏÑ±Ìôî"
        
        perform_check "FTP - ÏóÖÎ°úÎìú ÌååÏùº Í∂åÌïú" \
            "grep -q 'local_umask=022' /etc/vsftpd/vsftpd.conf" \
            "MEDIUM" "FTP" \
            "ÏóÖÎ°úÎìú ÌååÏùº Í∂åÌïú Ï†úÌïú"
        
        perform_check "FTP - ÎåÄÏó≠Ìè≠ Ï†úÌïú" \
            "grep -q 'local_max_rate=' /etc/vsftpd/vsftpd.conf" \
            "LOW" "FTP" \
            "ÏÇ¨Ïö©ÏûêÎ≥Ñ ÎåÄÏó≠Ìè≠ Ï†úÌïú ÏÑ§Ï†ï"
        
        perform_check "FTP - ÎèôÏãú Ïó∞Í≤∞ Ï†úÌïú" \
            "grep -q 'max_clients=' /etc/vsftpd/vsftpd.conf" \
            "MEDIUM" "FTP" \
            "ÏµúÎåÄ ÎèôÏãú Ï†ëÏÜçÏûê Ïàò Ï†úÌïú"
        
        perform_check "FTP - IPÎ≥Ñ Ïó∞Í≤∞ Ï†úÌïú" \
            "grep -q 'max_per_ip=' /etc/vsftpd/vsftpd.conf" \
            "MEDIUM" "FTP" \
            "IPÎãπ ÏµúÎåÄ Ïó∞Í≤∞ Ïàò Ï†úÌïú"
        
        perform_check "FTP - ÏÑ∏ÏÖò ÌÉÄÏûÑÏïÑÏõÉ" \
            "grep -q 'idle_session_timeout=' /etc/vsftpd/vsftpd.conf" \
            "MEDIUM" "FTP" \
            "Ïú†Ìú¥ ÏÑ∏ÏÖò ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï"
        
        perform_check "FTP - Î°úÍ∑∏ ÌôúÏÑ±Ìôî" \
            "grep -q 'xferlog_enable=YES' /etc/vsftpd/vsftpd.conf" \
            "HIGH" "FTP" \
            "Ï†ÑÏÜ° Î°úÍ∑∏ ÌôúÏÑ±Ìôî"
        
        perform_check "FTP - ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏" \
            "grep -q 'log_ftp_protocol=YES' /etc/vsftpd/vsftpd.conf" \
            "LOW" "FTP" \
            "ÏÉÅÏÑ∏ ÌîÑÎ°úÌÜ†ÏΩú Î°úÍπÖ ÌôúÏÑ±Ìôî"
        
        perform_check "FTP - Passive Î™®Îìú Ìè¨Ìä∏ Ï†úÌïú" \
            "grep -q 'pasv_min_port=' /etc/vsftpd/vsftpd.conf" \
            "MEDIUM" "FTP" \
            "Passive Î™®Îìú Ìè¨Ìä∏ Î≤îÏúÑ Ï†úÌïú"
        
        perform_check "FTP - Î∞∞ÎÑà ÏÑ§Ï†ï" \
            "grep -q 'ftpd_banner=' /etc/vsftpd/vsftpd.conf" \
            "LOW" "FTP" \
            "Î≥¥Ïïà Í≤ΩÍ≥† Î∞∞ÎÑà ÏÑ§Ï†ï"
    else
        log_warning "vsftpd ÏÑ§Ï†ï ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå"
    fi
    
    echo "</div>" >> "$REPORT_FILE"
}

# =============================================================================
# Ï∂îÍ∞Ä Î≥¥Ïïà Ï≤¥ÌÅ¨
# =============================================================================
check_additional_security() {
    echo "<div class='section'><h2 class='section-title'>üîí Ï∂îÍ∞Ä Î≥¥Ïïà Ï≤¥ÌÅ¨</h2>" >> "$REPORT_FILE"
    log_info "Ï∂îÍ∞Ä Î≥¥Ïïà Í≤ÄÏÇ¨ ÏãúÏûë..."
    
    # 1. SSH Î≥¥Ïïà
    if [[ -f /etc/ssh/sshd_config ]]; then
        perform_check "SSH - ÌîÑÎ°úÌÜ†ÏΩú Î≤ÑÏ†Ñ 2" \
            "! grep -q 'Protocol 1' /etc/ssh/sshd_config" \
            "CRITICAL" "SSH" \
            "SSH ÌîÑÎ°úÌÜ†ÏΩú Î≤ÑÏ†Ñ 2Îßå ÏÇ¨Ïö©"
        
        perform_check "SSH - ÌÇ§ Í∏∞Î∞ò Ïù∏Ï¶ù" \
            "grep -q 'PubkeyAuthentication yes' /etc/ssh/sshd_config" \
            "HIGH" "SSH" \
            "Í≥µÍ∞úÌÇ§ Ïù∏Ï¶ù ÌôúÏÑ±Ìôî"
        
        perform_check "SSH - Îπà Ìå®Ïä§ÏõåÎìú Ï∞®Îã®" \
            "grep -q 'PermitEmptyPasswords no' /etc/ssh/sshd_config" \
            "CRITICAL" "SSH" \
            "Îπà Ìå®Ïä§ÏõåÎìú Î°úÍ∑∏Ïù∏ Ï∞®Îã®"
    fi
    
    # 2. ÏãúÏä§ÌÖú Î¨¥Í≤∞ÏÑ±
    perform_check "ÏãúÏä§ÌÖú - AIDE Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§" \
        "test -f /var/lib/aide/aide.db.gz" \
        "HIGH" "SYSTEM" \
        "AIDE Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî"
    
    perform_check "ÏãúÏä§ÌÖú - Î°úÍ∑∏ Î°úÌÖåÏù¥ÏÖò" \
        "test -f /etc/logrotate.d/vsftpd" \
        "MEDIUM" "SYSTEM" \
        "Î°úÍ∑∏ Î°úÌÖåÏù¥ÏÖò ÏÑ§Ï†ï"
    
    # 3. ÏÑ±Îä• Î∞è Í∞ÄÏö©ÏÑ±
    perform_check "ÏÑ±Îä• - Ïä§Ïôë ÌååÏùº Ï°¥Ïû¨" \
        "test -f /swapfile || swapon -s | grep -q partition" \
        "LOW" "SYSTEM" \
        "Ïä§Ïôë Í≥µÍ∞Ñ ÏÑ§Ï†ï"
    
    perform_check "Í∞ÄÏö©ÏÑ± - NTP ÎèôÍ∏∞Ìôî" \
        "systemctl is-active chronyd &>/dev/null || systemctl is-active ntp &>/dev/null" \
        "MEDIUM" "SYSTEM" \
        "ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî ÏÑúÎπÑÏä§ ÌôúÏÑ±Ìôî"
    
    echo "</div>" >> "$REPORT_FILE"
}

# =============================================================================
# Î≥¥Í≥†ÏÑú ÏöîÏïΩ ÏÉùÏÑ±
# =============================================================================
generate_summary() {
    local compliance_score=$(echo "scale=2; ($PASSED_CHECKS * 100) / $TOTAL_CHECKS" | bc)
    
    # HTML ÏöîÏïΩ
    cat >> "$REPORT_FILE" <<EOF
        <div class="summary-grid">
            <div class="summary-card">
                <div class="label">Ï†ÑÏ≤¥ Í≤ÄÏÇ¨ Ìï≠Î™©</div>
                <div class="value">$TOTAL_CHECKS</div>
            </div>
            <div class="summary-card">
                <div class="label">ÌÜµÍ≥º</div>
                <div class="value passed">$PASSED_CHECKS</div>
            </div>
            <div class="summary-card">
                <div class="label">Ïã§Ìå®</div>
                <div class="value failed">$FAILED_CHECKS</div>
            </div>
            <div class="summary-card">
                <div class="label">Í≤ΩÍ≥†</div>
                <div class="value warning">$WARNING_CHECKS</div>
            </div>
            <div class="summary-card compliance-score">
                <div class="label">Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ Ï†êÏàò</div>
                <div class="value">${compliance_score}%</div>
            </div>
        </div>
        
        <div class="progress-bar">
            <div class="progress-fill" style="width: ${compliance_score}%">
                ${compliance_score}% Ï§ÄÏàò
            </div>
        </div>
EOF
    
    # Ïã¨Í∞ÅÎèÑÎ≥Ñ findings Ï∂úÎ†•
    if [[ ${#CRITICAL_FINDINGS[@]} -gt 0 ]]; then
        echo "<div class='section'><h3>üö® Critical Findings (${#CRITICAL_FINDINGS[@]})</h3><ul>" >> "$REPORT_FILE"
        for finding in "${CRITICAL_FINDINGS[@]}"; do
            echo "<li>$finding</li>" >> "$REPORT_FILE"
        done
        echo "</ul></div>" >> "$REPORT_FILE"
    fi
    
    if [[ ${#HIGH_FINDINGS[@]} -gt 0 ]]; then
        echo "<div class='section'><h3>‚ö†Ô∏è High Risk Findings (${#HIGH_FINDINGS[@]})</h3><ul>" >> "$REPORT_FILE"
        for finding in "${HIGH_FINDINGS[@]}"; do
            echo "<li>$finding</li>" >> "$REPORT_FILE"
        done
        echo "</ul></div>" >> "$REPORT_FILE"
    fi
    
    # JSON ÏöîÏïΩ ÏóÖÎç∞Ïù¥Ìä∏
    python3 -c "
import json
with open('$JSON_REPORT', 'r+') as f:
    data = json.load(f)
    data['summary'] = {
        'total_checks': $TOTAL_CHECKS,
        'passed': $PASSED_CHECKS,
        'failed': $FAILED_CHECKS,
        'warnings': $WARNING_CHECKS,
        'compliance_score': $compliance_score
    }
    f.seek(0)
    json.dump(data, f, indent=2)
    f.truncate()
"
}

# =============================================================================
# Î©îÏù∏ Ïã§Ìñâ
# =============================================================================
main() {
    echo -e "${BOLD}${CYAN}"
    echo "============================================================"
    echo "   Î≥¥Ïïà Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ ÌÜµÌï© Í≤ÄÏÇ¨ ÎèÑÍµ¨ v2.0"
    echo "   KISA | CSAP | Í∏∞Ïà†Ï†Å Ï∑®ÏïΩÏ†ê ÌèâÍ∞Ä | Docker Î≥¥Ïïà"
    echo "============================================================"
    echo -e "${NC}"
    
    # Î£®Ìä∏ Í∂åÌïú ÌôïÏù∏
    if [[ $EUID -ne 0 ]]; then
        log_error "Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî Î£®Ìä∏ Í∂åÌïúÏúºÎ°ú Ïã§ÌñâÌï¥Ïïº Ìï©ÎãàÎã§."
        exit 1
    fi
    
    # Î¶¨Ìè¨Ìä∏ Ï¥àÍ∏∞Ìôî
    init_json_report
    init_html_report
    
    # Í≤ÄÏÇ¨ Ïã§Ìñâ
    check_kisa_cloud_security
    check_docker_security
    check_technical_vulnerability
    check_csap_compliance
    check_ftp_specific
    check_additional_security
    
    # ÏöîÏïΩ ÏÉùÏÑ±
    generate_summary
    
    # HTML Î¶¨Ìè¨Ìä∏ ÎßàÎ¨¥Î¶¨
    cat >> "$REPORT_FILE" <<EOF
        <div class="timestamp">
            Î≥¥Í≥†ÏÑú ÏÉùÏÑ±: $(date '+%YÎÖÑ %mÏõî %dÏùº %H:%M:%S')
        </div>
    </div>
</body>
</html>
EOF
    
    # Í≤∞Í≥º Ï∂úÎ†•
    echo
    echo -e "${BOLD}${CYAN}========== Í≤ÄÏÇ¨ ÏôÑÎ£å ==========${NC}"
    echo -e "${GREEN}ÌÜµÍ≥º: $PASSED_CHECKS${NC} | ${RED}Ïã§Ìå®: $FAILED_CHECKS${NC} | ${YELLOW}Í≤ΩÍ≥†: $WARNING_CHECKS${NC}"
    echo -e "${BOLD}Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ Ï†êÏàò: ${compliance_score}%${NC}"
    echo
    echo -e "${CYAN}ÏÉÅÏÑ∏ Î¶¨Ìè¨Ìä∏:${NC}"
    echo "  HTML: $REPORT_FILE"
    echo "  JSON: $JSON_REPORT"
    
    # Ïã¨Í∞ÅÌïú Î¨∏Ï†ú Í≤ΩÍ≥†
    if [[ ${#CRITICAL_FINDINGS[@]} -gt 0 ]]; then
        echo
        log_critical "Ï¶âÏãú Ï°∞ÏπòÍ∞Ä ÌïÑÏöîÌïú Critical Ìï≠Î™©Ïù¥ ${#CRITICAL_FINDINGS[@]}Í∞ú Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§!"
    fi
    
    # Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Î¶¨Ìè¨Ìä∏ Ïó¥Í∏∞ (GUI ÌôòÍ≤ΩÏù∏ Í≤ΩÏö∞)
    if [[ -n "$DISPLAY" ]] && command -v xdg-open &>/dev/null; then
        xdg-open "$REPORT_FILE" &>/dev/null &
    fi
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
main "$@"